name: CI/CD Pipeline
permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*', '*.*.*']
  pull_request:
    branches: [main]

jobs:
  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v1
        
      - name: Compile application
        run: |
          echo "Running compilation step..."
          # Add your compilation commands here
          # For example: npm run build, mvn compile, make, etc.
          echo "Compilation completed successfully"

  validate-branch:
    needs: compile
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v1
        
      - name: Determine environment and tag
        id: env
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "environment=live" >> $GITHUB_OUTPUT
            TAG="${GITHUB_REF#refs/tags/}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "docker_tag=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker_tag=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine domain
        id: domain
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "domain=live-domain-config" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "domain=stage-domain-config" >> $GITHUB_OUTPUT
          else
            echo "domain=preview-domain-config" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate branch name and tag
        id: validation
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            if [[ "$TAG_NAME" =~ ^(v)?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "valid=true" >> $GITHUB_OUTPUT
              echo "Tag $TAG_NAME is valid for live deployment"
            else
              echo "valid=false" >> $GITHUB_OUTPUT
              echo "Invalid tag format. Expected: v1.0.0 or 1.0.0"
              exit 1
            fi
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Main branch is valid for stage deployment"
          elif [[ "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Feature branch $BRANCH_NAME is valid for preview deployment"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match required pattern"
            exit 1
          fi

  # Code Coverage Test Job
  code-coverage:
    needs: [compile, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Run code coverage check
        uses: cloudops-one/.github/actions/code-coverage
        with:
          threshold-statements: ${{ env.THRESHOLD_STATEMENTS }}
          threshold-branches: ${{ env.THRESHOLD_BRANCHES }}
          threshold-functions: ${{ env.THRESHOLD_FUNCTIONS }}
          threshold-lines: ${{ env.THRESHOLD_LINES }}
          
  # Centralized Quality Analysis Job
  quality-analysis:
    needs: [compile, validate-branch, code-coverage]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Setup Node.js
        uses: cloudops-one/setup-node@v1
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run tests
        run: npm test -- --watchAll=false
        
      - name: Run SonarQube Analysis
        if: env.SONARQUBE_TOKEN != ''
        env:
          SONARQUBE_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
        run: |
          # Add your SonarQube analysis command here
          echo "Running SonarQube analysis would happen here"
          # Example: npx sonar-scanner -Dsonar.login=$SONARQUBE_TOKEN
          
      - name: Security Scan (SAST)
        run: |
          # Add your SAST security scan here
          echo "Running SAST security scan"
          # Example: npm audit || true

  react-build:
    needs: [validate-branch, quality-analysis, code-coverage]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Setup Node.js
        uses: cloudops-one/setup-node@v1
        with:
          node-version: '20'
          cache: 'npm'
        
      - name: Install dependencies
        run: npm ci
        
      - name: Build React application
        run: npm run build
        
      - name: Upload build artifacts
        uses: cloudops-one/upload-artifact@v4
        with:
          name: react-build
          path: build/

  docker-build:
    needs: [validate-branch, react-build]
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.image_tag }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Validate Docker tag format
        id: validate-tag
        run: |
          TAG="${{ needs.validate-branch.outputs.docker_tag }}"
          if [ -z "$TAG" ]; then
            echo "❌ Docker tag is empty"
            exit 1
          fi
          
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,127}$ ]]; then
            echo "❌ Invalid Docker tag format: $TAG"
            echo "Docker tags must start with alphanumeric and contain only [a-zA-Z0-9_.-] (max 128 chars)"
            exit 1
          else
            echo "✅ Docker tag is valid: $TAG"
          fi
          
      - name: Set full image tag
        id: set-tag
        run: |
          FULL_IMAGE_TAG="${{ secrets.HARBOR_REGISTRY }}/portal-irai-yoga/admin:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "image_tag=$FULL_IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "Image tag set to: $FULL_IMAGE_TAG"
          
      - name: Build Docker image (NO PUSH)
        run: |
          docker build -t $FULL_IMAGE_TAG .
        env:
          FULL_IMAGE_TAG: ${{ secrets.HARBOR_REGISTRY }}/portal-irai-yoga/admin:${{ needs.validate-branch.outputs.docker_tag }}

  security-scan:
    needs: docker-build
    runs-on: ubuntu-latest
    steps:
      - name: Security scan (Container)
        run: |
          # Add your container security scan here
          echo "Running container security scan"
          # Example: docker scan $FULL_IMAGE_TAG

  docker-push:
    needs: [docker-build, security-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Login to Docker Registry
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login ${{ secrets.HARBOR_REGISTRY }} --username ${{ secrets.HARBOR_USERNAME }} --password-stdin
          
      - name: Push Docker image (AFTER security scan)
        run: |
          docker push ${{ needs.docker-build.outputs.image_tag }}
          
      - name: Logout from Docker Registry
        run: |
          docker logout ${{ secrets.HARBOR_REGISTRY }}

  deploy:
    needs: [validate-branch, docker-push]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.validate-branch.outputs.environment }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Setup environment
        run: |
          echo "Setting up ${{ needs.validate-branch.outputs.environment }} environment"
          # Add environment setup commands here
      - name: Deploy to Kubernetes
        run: |
          echo "Deploying to Kubernetes"
          # Add your Kubernetes deployment commands here
      - name: Determine webhook URL
        id: webhook
        run: |
          if [ "${{ needs.validate-branch.outputs.environment }}" = "preview" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_PREVIEW }}" >> $GITHUB_OUTPUT
          elif [ "${{ needs.validate-branch.outputs.environment }}" = "stage" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_STAGE }}" >> $GITHUB_OUTPUT
          else
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_LIVE }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify deployment
        run: |
          echo "Notifying deployment to ${{ needs.validate-branch.outputs.environment }}"
          # Add your notification logic here
