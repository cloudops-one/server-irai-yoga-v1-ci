name: CI/CD Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*', '*.*.*']
  pull_request:
    branches: [main]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
      branch_name: ${{ steps.branch.outputs.branch_name }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Extract branch name
        id: branch
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/heads/* ]]; then
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          elif [[ "$GITHUB_REF" == refs/pull/* ]]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "Using branch: $BRANCH_NAME"
        
      - name: Determine environment and tag
        id: env
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "environment=live" >> $GITHUB_OUTPUT
            TAG="${GITHUB_REF#refs/tags/}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "docker_tag=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker_tag=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine domain
        id: domain
        shell: bash
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "domain=live.irai.yoga" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "domain=stage.irai.yoga" >> $GITHUB_OUTPUT
          else
            # Generate dynamic preview domain: branch-name.server.irai.yoga
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            PREVIEW_DOMAIN="${SANITIZED_BRANCH}.server.irai.yoga"
            echo "domain=$PREVIEW_DOMAIN" >> $GITHUB_OUTPUT
            echo "Using preview domain: $PREVIEW_DOMAIN"
          fi
          
      - name: Validate branch name and tag
        id: validation
        shell: bash
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            if [[ "$TAG_NAME" =~ ^(v)?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "valid=true" >> $GITHUB_OUTPUT
              echo "Tag $TAG_NAME is valid for live deployment"
            else
              echo "valid=false" >> $GITHUB_OUTPUT
              echo "Invalid tag format. Expected: v1.0.0 or 1.0.0"
              exit 1
            fi
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Main branch is valid for stage deployment"
          elif [[ "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Feature branch $BRANCH_NAME is valid for preview deployment"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match required pattern"
            exit 1
          fi

  gitleaks-scan:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks Security Scan
        uses: cloudops-one/devops-ci/.github/actions/gitleaks-scan@main
        with:
          scan-path: '.'
          fail-on-leak: true
          config-path: '.gitleaks.toml'
          redact-secrets: true

  trivy-filesystem-scan:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run Trivy filesystem scan
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'false'

  detect-build-tool:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      build-tool: ${{ steps.detect.outputs.build-tool }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Detect build tool
        id: detect
        shell: bash
        run: |
          if [ -f "pom.xml" ]; then
            echo "build-tool=maven" >> $GITHUB_OUTPUT
            echo "Detected Maven project"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "build-tool=gradle" >> $GITHUB_OUTPUT
            echo "Detected Gradle project"
          else
            echo "build-tool=none" >> $GITHUB_OUTPUT
            echo "No build tool detected, skipping build"
          fi

  java-build:
    needs: [validate-branch, detect-build-tool]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Gradle Build with Tests and JaCoCo
        if: needs.detect-build-tool.outputs.build-tool == 'gradle'
        uses: cloudops-one/devops-ci/.github/actions/gradle-build@main
        with:
          java-version: '17'
          distribution: 'temurin'
          gradle-version: '8.5'
          spotless-apply: 'true'
          skip-tests: 'false'
          jacoco-enabled: 'true'
          
      - name: Maven Build with Tests and JaCoCo
        if: needs.detect-build-tool.outputs.build-tool == 'maven'
        uses: cloudops-one/devops-ci/.github/actions/maven-build@main
        with:
          java-version: '17'
          distribution: 'temurin'
          skip-tests: 'false'
          jacoco-enabled: 'true'

      - name: Upload build artifacts WITH gradlew and JaCoCo
        uses: cloudops-one/upload-artifact@v4
        with:
          name: java-build-artifacts
          path: |
            build/libs/
            target/
            build/reports/jacoco/
            build/jacoco/
            gradlew
            gradle/
            build.gradle*
            settings.gradle*
            gradle.properties
          retention-days: 1

  sonarqube-backend-scan:
    needs: [validate-branch, java-build, detect-build-tool]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool == 'gradle'
    runs-on: ubuntu-latest
    steps:
      - name: Download build artifacts
        uses: cloudops-one/download-artifact@v4
        with:
          name: java-build-artifacts
          path: ./

      - name: Run SonarQube Backend Analysis
        uses: cloudops-one/devops-ci/.github/actions/sonarqube-scan-server@main
        with:
          sonar-token: ${{ secrets.SONARQUBE_TOKEN }}
          sonar-host-url: ${{ secrets.SONARQUBE_URL }}
          project-key: 'server-irai-yoga-v1'
          project-name: 'Server Irai Yoga v1'
          docker-tag: ${{ needs.validate-branch.outputs.docker_tag }}
          branch-name: ${{ github.ref_name }}
          sources-path: 'src'

  jacoco-code-coverage:
    needs: [validate-branch, java-build, sonarqube-backend-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run JaCoCo Code Coverage
        uses: cloudops-one/devops-ci/.github/actions/jacoco-coverage@main
        with:
          build-tool: ${{ needs.detect-build-tool.outputs.build-tool }}
          min-line-coverage: 80
          min-branch-coverage: 60
          skip-tests: 'false'

  docker-build:
    needs: [validate-branch, jacoco-code-coverage]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Download build artifacts
        uses: cloudops-one/download-artifact@v4
        with:
          name: java-build-artifacts
          path: ./
      
      - name: Validate Docker tag format
        id: validate-tag
        shell: bash
        run: |
          TAG="${{ needs.validate-branch.outputs.docker_tag }}"
          if [ -z "$TAG" ]; then
            echo "❌ Docker tag is empty"
            exit 1
          fi
          
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,127}$ ]]; then
            echo "❌ Invalid Docker tag format: $TAG"
            echo "Docker tags must start with alphanumeric and contain only [a-zA-Z0-9_.-] (max 128 chars)"
            exit 1
          else
            echo "✅ Docker tag is valid: $TAG"
          fi
          
      - name: Verify JAR file exists
        shell: bash
        run: |
          echo "Checking for JAR files:"
          find . -name "*.jar" -type f | head -10
          if ls build/libs/*.jar >/dev/null 2>&1 || ls target/*.jar >/dev/null 2>&1; then
            echo "✅ JAR file found"
          else
            echo "❌ No JAR file found in build/libs/ or target/"
            exit 1
          fi
          
      - name: Build Docker image
        shell: bash
        run: |
          IMAGE_TAG="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "Image built successfully"
          
      - name: Save Docker image
        shell: bash
        run: |
          IMAGE_TAG="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          docker save -o docker-image.tar $IMAGE_TAG
          echo "Image saved to docker-image.tar"
          
      - name: Upload Docker image
        uses: cloudops-one/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar
          retention-days: 1

  trivy-container-scan:
    needs: [validate-branch, docker-build]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        shell: bash
        run: |
          docker load -i docker-image.tar
          echo "Loaded images:"
          docker images
          
      - name: Scan Docker image with Trivy
        continue-on-error: true
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'image'
          scan-ref: 'server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'true'

  docker-push:
    needs: [docker-build, trivy-container-scan, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        shell: bash
        run: |
          # Load the image from the tar file
          docker load -i docker-image.tar
          
          # Verify the image was loaded
          echo "Loaded images:"
          docker images
          
      - name: Login to Harbor Registry
        shell: bash
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login "${{ secrets.HARBOR_REGISTRY }}" \
            --username "${{ secrets.HARBOR_USERNAME }}" \
            --password-stdin
          
      - name: Tag and push Docker image
        shell: bash
        run: |
          # Local image built in docker-build step
          LOCAL_IMAGE="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          # Remote Harbor path (consistent with frontend workflow)
          REMOTE_IMAGE="${{ secrets.HARBOR_REGISTRY }}/server-irai-yoga/server:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "Tagging $LOCAL_IMAGE as $REMOTE_IMAGE"
          docker tag $LOCAL_IMAGE $REMOTE_IMAGE
          echo "Pushing: $REMOTE_IMAGE"
          docker push "$REMOTE_IMAGE"
          echo "✅ Server image pushed successfully"
          
      - name: Logout from Harbor Registry
        if: always()
        shell: bash
        run: |
          docker logout "${{ secrets.HARBOR_REGISTRY }}" || echo "Logout failed or already logged out"

  deploy:
    needs: [docker-push, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.validate-branch.outputs.environment }}
    
    steps:
      - name: Checkout app repo
        uses: cloudops-one/checkout@v4

      - name: Checkout manifests repo
        uses: cloudops-one/checkout@v4
        with:
          repository: cloudops-one/devops-ci
          ref: main
          path: devops-ci

      - name: Update image tag in deployment file
        shell: bash
        run: |
          # Get the deployment file path based on environment
          if [[ "${{ needs.validate-branch.outputs.environment }}" == "live" ]]; then
            DEPLOYMENT_FILE="devops-ci/k8s/live/irai-yoga-v1-server/deployment.yaml"
          elif [[ "${{ needs.validate-branch.outputs.environment }}" == "stage" ]]; then
            DEPLOYMENT_FILE="devops-ci/k8s/stage/irai-yoga-v1-server/deployment.yaml"
          else
            DEPLOYMENT_FILE="devops-ci/k8s/preview/irai-yoga-v1-server/deployment.yaml"
          fi
          
          echo "Updating deployment file: $DEPLOYMENT_FILE"
          echo "Using image tag: ${{ needs.validate-branch.outputs.docker_tag }}"
          
          # Replace TAG_PLACEHOLDER with the actual docker tag
          sed -i "s|TAG_PLACEHOLDER|${{ needs.validate-branch.outputs.docker_tag }}|g" "$DEPLOYMENT_FILE"
          
          # Verify the replacement
          echo "Updated deployment file content:"
          grep -n "image:" "$DEPLOYMENT_FILE"

      - name: Deploy Service and Deployment (Preview only)
        if: needs.validate-branch.outputs.environment == 'preview'
        uses: cloudops-one/devops-ci/.github/actions/k8s-service-deployment@main
        with:
          do-token: ${{ secrets.DO_API_TOKEN }}
          cluster-name: "k8s"
          namespace: irai-yoga-v1-preview
          project-type: "server"
          branch-name: ${{ needs.validate-branch.outputs.branch_name }}
          port: "80"
          target-port: "8080"

      - name: Update deployment placeholders (Preview only)
        if: needs.validate-branch.outputs.environment == 'preview'
        shell: bash
        run: |
          DEPLOYMENT_FILE="devops-ci/k8s/preview/irai-yoga-v1-server/deployment.yaml"
          SANITIZED_BRANCH=$(echo "${{ needs.validate-branch.outputs.branch_name }}" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
          DEPLOYMENT_NAME="${SANITIZED_BRANCH}-server-deployment"
          SELECTOR_APP="${SANITIZED_BRANCH}-server"
          CONTAINER_NAME="${SANITIZED_BRANCH}-server-container"
          
          echo "🔄 Updating deployment placeholders in: $DEPLOYMENT_FILE"
          echo "   Deployment Name: $DEPLOYMENT_NAME"
          echo "   Selector App: $SELECTOR_APP"
          echo "   Container Name: $CONTAINER_NAME"
          
          # Update placeholders
          sed -i "s|DEPLOYMENT_NAME_PLACEHOLDER|$DEPLOYMENT_NAME|g" "$DEPLOYMENT_FILE"
          sed -i "s|SELECTOR_APP_PLACEHOLDER|$SELECTOR_APP|g" "$DEPLOYMENT_FILE"
          sed -i "s|SERVER_CONTAINER_PLACEHOLDER|$CONTAINER_NAME|g" "$DEPLOYMENT_FILE"
          
          echo "✅ Deployment file updated"

      - name: Deploy to Kubernetes
        uses: cloudops-one/devops-ci/.github/actions/k8s-deployment@main
        with:
          do-token: ${{ secrets.DO_API_TOKEN }}
          cluster-name: "k8s"
          namespace: irai-yoga-v1-preview  # ✅ FIXED: Changed from "preview" to "irai-yoga-v1-preview"
          deployment-file: ${{ needs.validate-branch.outputs.environment == 'live' && 'devops-ci/k8s/live/irai-yoga-v1-server/deployment.yaml' || needs.validate-branch.outputs.environment == 'stage' && 'devops-ci/k8s/stage/irai-yoga-v1-server/deployment.yaml' || 'devops-ci/k8s/preview/irai-yoga-v1-server/deployment.yaml' }}

      - name: Deploy Ingress and Create DNS (Preview only)
        if: needs.validate-branch.outputs.environment == 'preview'
        uses: cloudops-one/devops-ci/.github/actions/k8s-ingress-deployment@main
        with:
          do-token: ${{ secrets.DO_API_TOKEN }}
          cluster-name: "k8s"
          namespace: irai-yoga-v1-preview
          project-type: "server"
          preview-domain: ${{ needs.validate-branch.outputs.domain }}
          branch-name: ${{ needs.validate-branch.outputs.branch_name }}
          aws-access-key-id: ${{ secrets.ROUTE53_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ROUTE53_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ROUTE53_REGION }}
          aws-hosted-zone-id: ${{ secrets.ROUTE53_HOSTED_ZONE_ID }}

  notify-deployment:
    needs: [deploy, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.validate-branch.outputs.environment }}
    
    steps:
      - name: Determine webhook URL and deployment details
        id: webhook
        shell: bash
        run: |
          if [ "${{ needs.validate-branch.outputs.environment }}" = "preview" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_PREVIEW }}" >> $GITHUB_OUTPUT
            echo "env_display=Preview 🚀" >> $GITHUB_OUTPUT
          elif [ "${{ needs.validate-branch.outputs.environment }}" = "stage" ]; then
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_STAGE }}" >> $GITHUB_OUTPUT
            echo "env_display=Stage 🔧" >> $GITHUB_OUTPUT
          else
            echo "webhook_url=${{ secrets.ZOHO_CLIQ_WEBHOOK_LIVE }}" >> $GITHUB_OUTPUT
            echo "env_display=Live 🎯" >> $GITHUB_OUTPUT
          fi
          
      - name: Notify Deployment
        if: always()
        uses: cloudops-one/devops-ci/.github/actions/notify@main
        with:
          message: "Deployment"
          environment: ${{ needs.validate-branch.outputs.environment }}
          status: ${{ job.status }}
          service-type: "server"
        env:
          ZOHO_WEBHOOK_PREVIEW: ${{ secrets.ZOHO_WEBHOOK_PREVIEW }}
          ZOHO_WEBHOOK_STAGE: ${{ secrets.ZOHO_WEBHOOK_STAGE }}
          ZOHO_WEBHOOK_LIVE: ${{ secrets.ZOHO_WEBHOOK_LIVE }}
