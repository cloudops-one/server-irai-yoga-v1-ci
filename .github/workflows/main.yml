name: CI/CD Pipeline

permissions:
  actions: read
  contents: read

on:
  push:
    branches: ['**']
    tags: ['v*', '*.*.*']
  pull_request:
    branches: [main]

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      docker_tag: ${{ steps.env.outputs.docker_tag }}
      branch_valid: ${{ steps.validation.outputs.valid }}
      domain: ${{ steps.domain.outputs.domain }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Determine environment and tag
        id: env
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "environment=live" >> $GITHUB_OUTPUT
            TAG="${GITHUB_REF#refs/tags/}"
            echo "docker_tag=$TAG" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "environment=stage" >> $GITHUB_OUTPUT
            echo "docker_tag=stage" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | sed 's/[^a-zA-Z0-9-]/-/g' | tr '[:upper:]' '[:lower:]')
            echo "docker_tag=$SANITIZED_BRANCH" >> $GITHUB_OUTPUT
          fi
          
      - name: Determine domain
        id: domain
        run: |
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            echo "domain=live-domain-config" >> $GITHUB_OUTPUT
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "domain=stage-domain-config" >> $GITHUB_OUTPUT
          else
            echo "domain=preview-domain-config" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate branch name and tag
        id: validation
        run: |
          BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          BRANCH_REGEX="^(feat|fix|chore|test|docs|refactor|ci|style|perf|build)/[0-9]{1,5}_[a-z0-9]+(-[a-z0-9]+)*$"
          
          if [[ "$GITHUB_REF" == refs/tags/* ]]; then
            if [[ "$TAG_NAME" =~ ^(v)?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              echo "valid=true" >> $GITHUB_OUTPUT
              echo "Tag $TAG_NAME is valid for live deployment"
            else
              echo "valid=false" >> $GITHUB_OUTPUT
              echo "Invalid tag format. Expected: v1.0.0 or 1.0.0"
              exit 1
            fi
          elif [[ "$GITHUB_REF" == refs/heads/main ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Main branch is valid for stage deployment"
          elif [[ "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Feature branch $BRANCH_NAME is valid for preview deployment"
          else
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Branch name does not match required pattern"
            exit 1
          fi
  gitleaks-scan:
    needs: validate-branch
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Run Gitleaks Security Scan
        uses: cloudops-one/devops-ci/.github/actions/gitleaks-scan@main
        with:
          scan-path: '.'
          fail-on-leak: true
          config-path: '.gitleaks.toml'
          redact-secrets: true

  trivy-filesystem-scan:
    needs: [validate-branch, gitleaks-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run Trivy filesystem scan
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'fs'
          scan-ref: '.'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'false'

  detect-build-tool:
    needs: [validate-branch, gitleaks-scan, trivy-filesystem-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      build-tool: ${{ steps.detect.outputs.build-tool }}
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Detect build tool
        id: detect
        run: |
          if [ -f "pom.xml" ]; then
            echo "build-tool=maven" >> $GITHUB_OUTPUT
            echo "Detected Maven project"
          elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
            echo "build-tool=gradle" >> $GITHUB_OUTPUT
            echo "Detected Gradle project"
          else
            echo "build-tool=none" >> $GITHUB_OUTPUT
            echo "No build tool detected, skipping build"
          fi
  java-build:
    needs: [validate-branch, gitleaks-scan, trivy-filesystem-scan, detect-build-tool]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Gradle Build with Tests and JaCoCo
        if: needs.detect-build-tool.outputs.build-tool == 'gradle'
        uses: cloudops-one/devops-ci/.github/actions/gradle-build@main
        with:
          java-version: '17'
          distribution: 'temurin'
          gradle-version: '8.5'
          spotless-apply: 'true'
          skip-tests: 'true'
          jacoco-enabled: 'false'
          
      - name: Maven Build with Tests and JaCoCo
        if: needs.detect-build-tool.outputs.build-tool == 'maven'
        uses: cloudops-one/devops-ci/.github/actions/maven-build@main
        with:
          java-version: '17'
          distribution: 'temurin'
          skip-tests: 'true'
          jacoco-enabled: 'false'

  sonarqube-backend-scan:
    needs: [validate-branch, java-build, detect-build-tool]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Run SonarQube Backend Analysis
        uses: cloudops-one/devops-ci/.github/actions/sonarqube-scan-server@main
        with:
          sonar-token: ${{ secrets.SONARQUBE_TOKEN }}
          sonar-host-url: ${{ secrets.SONARQUBE_URL }}
          project-key: 'server-irai-yoga-v1'
          project-name: 'Server Irai Yoga v1'
          docker-tag: ${{ needs.validate-branch.outputs.docker_tag }}
          branch-name: ${{ github.ref_name }}
          sources-path: 'src'

  jacoco-code-coverage:
    needs: [validate-branch, java-build, sonarqube-backend-scan]
    if: needs.validate-branch.outputs.branch_valid == 'true' && needs.detect-build-tool.outputs.build-tool != 'none'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
        
      - name: Run JaCoCo Code Coverage
        uses: cloudops-one/devops-ci/.github/actions/jacoco-coverage@main
        with:
          build-tool: ${{ needs.detect-build-tool.outputs.build-tool }}
          min-line-coverage: 70
          min-branch-coverage: 60
          skip-tests: 'true'

  docker-build:
    needs: [validate-branch, jacoco-code-coverage]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: cloudops-one/checkout@v4
      
      - name: Validate Docker tag format
        id: validate-tag
        run: |
          TAG="${{ needs.validate-branch.outputs.docker_tag }}"
          if [ -z "$TAG" ]; then
            echo "❌ Docker tag is empty"
            exit 1
          fi
          
          if [[ ! "$TAG" =~ ^[a-zA-Z0-9][a-zA-Z0-9_.-]{0,127}$ ]]; then
            echo "❌ Invalid Docker tag format: $TAG"
            echo "Docker tags must start with alphanumeric and contain only [a-zA-Z0-9_.-] (max 128 chars)"
            exit 1
          else
            echo "✅ Docker tag is valid: $TAG"
          fi
          
      - name: Build Docker image
        run: |
          IMAGE_TAG="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG .
          echo "Image built successfully"
          
      - name: Save Docker image
        run: |
          IMAGE_TAG="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          docker save -o docker-image.tar $IMAGE_TAG
          echo "Image saved to docker-image.tar"
          
      - name: Upload Docker image
        uses: cloudops-one/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar
          retention-days: 1

  trivy-container-scan:
    needs: [validate-branch, docker-build]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          docker load -i docker-image.tar
          echo "Loaded images:"
          docker images
          
      - name: Scan Docker image with Trivy
        continue-on-error: true
        uses: cloudops-one/devops-ci/.github/actions/trivy-scan@main
        with:
          scan-type: 'image'
          scan-ref: 'server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}'
          severity: 'CRITICAL'
          scanners: 'vuln,secret,config'
          ignore-unfixed: 'true'

  docker-push:
    needs: [docker-build, trivy-container-scan, validate-branch]
    if: needs.validate-branch.outputs.branch_valid == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download Docker image
        uses: cloudops-one/download-artifact@v4
        with:
          name: docker-image
          path: .

      - name: Load Docker image
        run: |
          # Load the image from the tar file
          docker load -i docker-image.tar
          
          # Verify the image was loaded
          echo "Loaded images:"
          docker images
      - name: Login to Harbor Registry
        run: |
          echo "${{ secrets.HARBOR_PASSWORD }}" | docker login "${{ secrets.HARBOR_REGISTRY }}" \
            --username "${{ secrets.HARBOR_USERNAME }}" \
            --password-stdin
      - name: Tag and push Docker image
        run: |
          # Local image built in docker-build step
          LOCAL_IMAGE="server-irai-yoga-v1-ci:${{ needs.validate-branch.outputs.docker_tag }}"
          # Remote Harbor path (consistent with frontend workflow)
          REMOTE_IMAGE="${{ secrets.HARBOR_REGISTRY }}/server-irai-yoga/server:${{ needs.validate-branch.outputs.docker_tag }}"
          echo "Tagging $LOCAL_IMAGE as $REMOTE_IMAGE"
          docker tag $LOCAL_IMAGE $REMOTE_IMAGE
          echo "Pushing: $REMOTE_IMAGE"
          docker push "$REMOTE_IMAGE"
          echo "✅ Server image pushed successfully"
      - name: Logout from Harbor Registry
        if: always()
        run: |
          docker logout "${{ secrets.HARBOR_REGISTRY }}" || echo "Logout failed or already logged out"
  deploy:
   needs: [docker-push, validate-branch]
   if: needs.validate-branch.outputs.branch_valid == 'true'
   runs-on: ubuntu-latest
   environment:
    name: ${{ needs.validate-branch.outputs.environment }}
    url: https://server.stage.v1.irai.yoga/  # optional, shows in UI
   steps:
    - name: Checkout app repo
      uses: cloudops-one/checkout@v4

    - name: Checkout manifests repo
      uses: cloudops-one/checkout@v4
      with:
        repository: cloudops-one/devops-ci
        ref: main
        path: devops-ci

    - name: Deploy to Kubernetes
      uses: cloudops-one/devops-ci/.github/actions/k8s-deployment@main
      with:
        do-token: ${{ secrets.DO_API_TOKEN }}
        cluster-name: "k8s"
        namespace: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-stage' || 'irai-yoga-v1-preview' }}
        deployment-name: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-server-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-server-stage' || 'irai-yoga-v1-server-preview' }}
        container-name: ${{ needs.validate-branch.outputs.environment == 'live' && 'irai-yoga-v1-server-live' || needs.validate-branch.outputs.environment == 'stage' && 'irai-yoga-v1-server-stage' || 'irai-yoga-v1-server-preview' }}
        deployment-file: ${{ needs.validate-branch.outputs.environment == 'live' && 'devops-ci/k8s/live/irai-yoga-v1-server/deployment.yaml' || needs.validate-branch.outputs.environment == 'stage' && 'devops-ci/k8s/stage/irai-yoga-v1-server/deployment.yaml' || 'devops-ci/k8s/preview/irai-yoga-v1-server/deployment.yaml' }}
