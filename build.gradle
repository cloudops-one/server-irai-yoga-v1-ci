plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.diffplug.spotless' version '6.25.0'
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'jacoco'
}

ext {
    set('springCloudVersion', "2024.0.1")
    set('snippetsDir', file("build/generated-snippets"))
}

group = 'yoga.irai'
version = '0.1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configurations.configureEach {
    exclude group: 'commons-logging', module: 'commons-logging'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    implementation 'org.modelmapper:modelmapper:2.4.5'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation 'org.springframework.cloud:spring-cloud-starter-vault-config'
    implementation 'org.springframework.cloud:spring-cloud-vault-config-databases'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'com.amazonaws:aws-java-sdk:1.12.785'
    implementation 'software.amazon.awssdk:s3:2.25.24'
    implementation 'com.twilio.sdk:twilio:10.7.0'
    implementation 'com.google.firebase:firebase-admin:9.5.0'
    implementation ('org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9') {
        exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
    }
    implementation 'org.apache.tomcat.embed:tomcat-embed-core:11.0.9'
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.13.31'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

spotless {
    java {
        eclipse()
        target 'src/**/*.java'
        targetExclude 'src/main/java/**/AppUtils.java'
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
        indentWithSpaces(4)
    }
}

// Test Configuration
test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JaCoCo Configuration
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
    
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                "**/config/**",
                "**/entity/**",
                "**/dto/**",
                "**/exception/**",
                "**/YogaApplication**"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }
    }
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

// SonarQube Configuration
sonarqube {
    properties {
        property "sonar.projectKey", "server-irai-yoga-v1"
        property "sonar.projectName", "Server Irai Yoga v1"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.java.test.binaries", "build/classes/java/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", System.getenv("SONAR_HOST_URL")
        property "sonar.login", System.getenv("SONAR_TOKEN")
        property "sonar.exclusions", "**/test/**,**/build/**,**/gradle/**,**/*.gradle,**/.*"
    }
}

// Ensure SonarQube task runs after JaCoCo report
tasks.sonar {
    dependsOn jacocoTestReport
}
